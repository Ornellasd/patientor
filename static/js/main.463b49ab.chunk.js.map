{"version":3,"sources":["types.ts","constants.ts","state/reducer.ts","state/state.tsx","components/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","PatientPage/helper.ts","PatientPage/Hospital.tsx","PatientPage/HealthCheck.tsx","PatientPage/OccupationalHealth.tsx","PatientPage/Entry.tsx","AddEntryModal/AddEntryForm.tsx","AddEntryModal/index.tsx","PatientPage/index.tsx","App.tsx","index.tsx"],"names":["Gender","EntryType","HealthCheckRating","apiBaseUrl","setPatient","patient","type","payload","initialState","patients","diagnoses","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","TextField","field","placeholder","style","color","NumberField","min","max","DiagnosisSelection","setFieldValue","setFieldTouched","stateOptions","diagnosis","key","code","text","Dropdown","fluid","multiple","search","selection","onChange","_event","data","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","requiredError","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","isLoading","React","useState","setModalOpen","setError","closeModal","undefined","submitNewPatient","axios","post","newPatient","console","response","Loader","active","inline","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","Cell","to","id","filteredDiagnosisName","filter","Hospital","entry","date","Icon","description","diagnosisCodes","length","paddingTop","keys","discharge","criteria","HealthCheck","healthCheckRating","Healthy","LowRisk","HighRisk","healthCheckRatingIcon","OccupationalHealthcare","sickLeave","startDate","endDate","EntryDetails","OccupationalHealth","entryTypeOptions","isString","String","AddEntryForm","specialist","employerName","num","formatError","Number","paddingBottom","AddEntryModal","PatientPage","useParams","useEffect","fetchPatient","get","patientInfoFromApi","submitNewEntry","newEntry","genderIcon","entries","Entry","App","setIsLoading","fetchPatientList","patientListFromApi","fetchDiagnosesList","diagnosesListFromApi","Link","primary","Divider","hidden","path","ReactDOM","render","action","reduce","memo","document","getElementById"],"mappings":"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","file":"static/js/main.463b49ab.chunk.js","sourcesContent":["export interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\nexport enum Gender {\n  Male = 'male',\n  Female = 'female',\n  Other = 'other'\n}\n\nexport enum EntryType {\n  Hospital = 'Hospital',\n  OccupationalHealthcare = 'OccupationalHealthcare',\n  HealthCheck = 'HealthCheck'\n}\n\nexport interface Patient {\n  id: string;\n  name: string;\n  occupation: string;\n  gender: Gender;\n  ssn?: string;\n  dateOfBirth?: string;\n  entries: Entry[];\n}\n\nexport interface BaseEntry {\n  id: string;\n  description: string;\n  date: string;\n  specialist: string;\n  diagnosisCodes?: Array<Diagnosis['code']>;\n}\n\nexport enum HealthCheckRating {\n  'Healthy' = 0,\n  'LowRisk' = 1,\n  'HighRisk' = 2,\n  'CriticalRisk' = 3\n}\n\nexport interface HealthCheckEntry extends BaseEntry {\n  type: 'HealthCheck';\n  healthCheckRating: HealthCheckRating;\n}\n\ninterface SickLeave {\n  startDate: string;\n  endDate: string;\n}\n\nexport interface OccupationalHealthCareEntry extends BaseEntry {\n  type: 'OccupationalHealthcare';\n  sickLeave?: SickLeave;\n  employerName?: string;\n}\n\ninterface Discharge {\n  date: string;\n  criteria: string;\n}\n\nexport interface HospitalEntry extends BaseEntry {\n  type: 'Hospital'\n  discharge: Discharge\n}\n\nexport type Entry = \n  | HealthCheckEntry\n  | OccupationalHealthCareEntry\n  | HospitalEntry;\n\nexport type NewVisitEntry = \n  | Omit<OccupationalHealthCareEntry, 'id'>\n  | Omit<HealthCheckEntry, 'id'>\n  | Omit<HospitalEntry, 'id'>;\n\n  // export type NewVisitEntry = Omit<Entry, 'id'>;","export const apiBaseUrl: string = 'https://patientor-backend-obmk.onrender.com/api';","import { State } from './state';\nimport { Diagnosis, Patient } from '../types';\n\nexport type Action =\n  | {\n      type: 'SET_PATIENT_LIST';\n      payload: Patient[];\n    }\n  | {\n      type: 'ADD_PATIENT';\n      payload: Patient;\n    }\n  | {\n      type: 'SET_PATIENT';\n      payload: Patient;\n    }\n  | {\n      type: 'SET_DIAGNOSES_LIST';\n      payload: Diagnosis[];\n    };\n\nexport const setDiagnoses = (diagnoses: Diagnosis[]): Action => {\n  return {\n    type: 'SET_DIAGNOSES_LIST',\n    payload: diagnoses\n  };\n};\n\nexport const setPatients = (patients: Patient[]): Action => {\n  return {\n    type: 'SET_PATIENT_LIST',\n    payload: patients\n  };\n};\n\nexport const setPatient = (patient: Patient): Action => {\n  return {\n    type: 'SET_PATIENT',\n    payload: patient\n  };\n};\n    \nexport const addPatient = (patient: Patient): Action => {\n  return {\n    type: 'ADD_PATIENT',\n    payload: patient\n  };\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'SET_PATIENT_LIST':\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients\n        }\n      };\n    case 'ADD_PATIENT':\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    case 'SET_PATIENT': {\n      return {\n        ...state,\n        patient: action.payload\n      };\n    }\n    case 'SET_DIAGNOSES_LIST': {\n      return {\n        ...state,\n        diagnoses: {\n          ...action.payload.reduce(\n            (entry, diagnosis) => ({ ...entry, [diagnosis.code]: diagnosis }),\n            {}\n          ),\n          ...state.diagnoses\n        }\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useContext, useReducer } from 'react';\nimport { Diagnosis, Patient } from '../types';\n\nimport { Action } from './reducer';\n\nexport type State = {\n  patients: { [id: string]: Patient };\n  patient: Patient | null;\n  diagnoses: Diagnosis[];\n};\n\nconst initialState: State = {\n  patients: {},\n  patient: null,\n  diagnoses: []\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","import React from 'react';\nimport { ErrorMessage, Field, FieldProps, FormikProps } from 'formik';\nimport { Dropdown, DropdownProps, Form } from 'semantic-ui-react';\nimport { Diagnosis, Gender, EntryType } from '../types';\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\nexport type EntryTypeOption = {\n  value: EntryType;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: (GenderOption | EntryTypeOption)[];\n};\n\nexport const SelectField = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField= ({\n  field,\n  label,\n  placeholder\n}: TextProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField = ({ field, label, min, max } : NumberProps ) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type=\"number\" min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>['setFieldValue'];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>['setFieldTouched'];\n}) => {\n  const field = 'diagnosisCodes';\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport { TextField, SelectField, GenderOption } from '../components/FormField';\nimport { Gender, Patient } from '../types';\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, 'id' | 'entries'>;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: 'Male' },\n  { value: Gender.Female, label: 'Female' },\n  { value: Gender.Other, label: 'Other' }\n];\n\nexport const AddPatientForm = ({ onSubmit, onCancel } : Props ) => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        ssn: '',\n        dateOfBirth: '',\n        occupation: '',\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from 'react';\nimport axios from 'axios';\nimport { Container, Table, Button, Loader } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { apiBaseUrl } from '../constants';\nimport { PatientFormValues } from '../AddPatientModal/AddPatientForm';\nimport AddPatientModal from '../AddPatientModal';\nimport { Patient } from '../types';\nimport HealthRatingBar from '../components/HealthRatingBar';\nimport { useStateValue, addPatient } from '../state';\n\ninterface Props {\n  isLoading: boolean;\n}\n\nconst PatientListPage = ({ isLoading }: Props) => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n      dispatch(addPatient(newPatient));\n      closeModal();\n    } catch (e) {\n      // @ts-expect-error error unknown\n      console.error(e.response?.data || 'Unknown Error');\n      // @ts-expect-error error unknown\n      setError(e.response?.data?.error || 'Unknown error');\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Loader active inline=\"centered\" />\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"center\">\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id}>\n              <Table.Cell>\n                <Link to={`/patients/${patient.id}`}>{patient.name}</Link>\n              </Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import { Diagnosis } from '../types';\n\nexport const filteredDiagnosisName = (code: string, diagnoses: Diagnosis[]): string => {\n  return Object.values(diagnoses).filter((diagnosis: Diagnosis) => diagnosis.code === code )[0].name + ' ';\n};\n","import React from 'react';\nimport { Diagnosis, HospitalEntry } from '../types';\nimport { Icon } from 'semantic-ui-react';\n\nimport { filteredDiagnosisName } from './helper';\n\ninterface Props {\n  entry: HospitalEntry;\n  diagnoses: Diagnosis[]\n}\n\nconst Hospital = ({ entry, diagnoses }: Props) => {\n  return (\n    <div key={entry.id} className=\"ui segment\">\n      <h2>{entry.date} <Icon name=\"hospital\" /></h2>\n      <em style={{ color: 'grey' }}>{entry.description}</em>\n\n      {(entry.diagnosisCodes && entry.diagnosisCodes.length > 0)  &&\n        <div style={{ paddingTop: '10px' }}>\n          <strong>Diagnoses:</strong>\n          <div className=\"ui bulleted list\">\n            {Object.keys(diagnoses).length > 0 && entry.diagnosisCodes.map(code =>\n              <div key={code} className=\"item\">\n                {filteredDiagnosisName(code, diagnoses)}\n              </div>\n            )}\n          </div>\n        </div>\n      }\n\n      <div style={{ paddingTop: '10px' }}>\n        <div>\n          <strong>Discharge Date:</strong>\n          <span> {entry.discharge.date}</span>\n        </div>\n        <div>\n          <strong>Discharge Criteria:</strong>\n          <span> {entry.discharge.criteria}</span>\n        </div>\n        </div>\n      </div>\n     \n  );\n};\n\nexport default Hospital;","import React from 'react';\nimport { HealthCheckEntry } from '../types';\nimport { Icon, SemanticCOLORS } from 'semantic-ui-react';\nimport { HealthCheckRating } from '../types';\n\nconst HealthCheck = ({ entry }: { entry: HealthCheckEntry }) => {\n  const healthCheckRatingIcon = (): SemanticCOLORS => {\n    switch(entry.healthCheckRating) {\n      case HealthCheckRating.Healthy:\n        return 'green';\n      case HealthCheckRating.LowRisk:\n        return 'yellow';\n      case HealthCheckRating.HighRisk:\n        return 'orange';\n      default:\n        return 'red';      \n    }\n  };\n  \n  return (\n    <div key={entry.id} className=\"ui segment\">\n      <h2>{entry.date} <Icon name=\"stethoscope\" /></h2>\n      <em style={{ color: 'grey' }}>{entry.description}</em>\n      <p style={{ paddingTop: '5px' }}>\n        <Icon name=\"heart\" color={healthCheckRatingIcon()} />\n      </p>\n    </div>\n  );\n};\n\nexport default HealthCheck;","import React from 'react';\nimport { Diagnosis, OccupationalHealthCareEntry } from '../types';\nimport { Icon } from 'semantic-ui-react';\n\nimport { filteredDiagnosisName } from './helper';\n\ninterface Props {\n  entry: OccupationalHealthCareEntry;\n  diagnoses: Diagnosis[];\n}\n\nconst OccupationalHealthcare = ({ entry, diagnoses }: Props) => {\n  return (\n    <div key={entry.id} className=\"ui segment\">\n      <h2>{entry.date} <Icon name=\"building\" /></h2>\n      <em style={{ color: 'grey' }}>{entry.description}</em>\n\n      {(entry.diagnosisCodes && entry.diagnosisCodes.length > 0)  &&\n        <div style={{ paddingTop: '10px' }}>\n          <strong>Diagnoses:</strong>\n          <div className=\"ui bulleted list\">\n            {Object.keys(diagnoses).length > 0 && entry.diagnosisCodes.map(code =>\n              <div key={code} className=\"item\">\n                {filteredDiagnosisName(code, diagnoses)}\n              </div>\n            )}\n          </div>\n        </div>\n      }\n    \n      {entry.sickLeave?.startDate  &&\n        <div style={{ paddingTop: '10px' }}>\n          <strong>\n            Sick leave:\n          </strong>\n          <span> {entry.sickLeave?.startDate} to {entry.sickLeave.endDate}</span>\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default OccupationalHealthcare;","import React from 'react';\nimport { Entry } from '../types';\nimport { useStateValue } from '../state';\n\nimport Hospital from './Hospital';\nimport HealthCheck from './HealthCheck';\nimport OccupationalHealthcare from './OccupationalHealth';\n\nconst EntryDetails = ({ entry }: { entry: Entry }) => {\n  const [{ diagnoses }] = useStateValue();\n\n  switch(entry.type) {\n    case 'Hospital':\n      return <Hospital entry={entry} diagnoses={diagnoses} />;\n    case 'OccupationalHealthcare':\n      return <OccupationalHealthcare entry={entry} diagnoses={diagnoses} />;\n    case 'HealthCheck':\n      return <HealthCheck entry={entry} />;\n    default:\n      return null;\n  }\n};\n\nexport default EntryDetails;","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport { TextField, EntryTypeOption, SelectField, DiagnosisSelection, NumberField } from '../components/FormField';\nimport { EntryType, NewVisitEntry } from '../types';\nimport { useStateValue } from '../state';\n\nexport type EntryFormValues = Omit<NewVisitEntry, 'type'>;\n\ninterface Props {\n  onSubmit: (values: EntryFormValues) => void;\n  onCancel: () => void;\n}\n\nconst entryTypeOptions: EntryTypeOption[] = [\n  { value: EntryType.Hospital, label: 'Hospital' },\n  { value: EntryType.HealthCheck, label: 'Health Check' },\n  { value: EntryType.OccupationalHealthcare, label: 'Occupational Healthcare' },\n];\n\nconst isString = (text: unknown): text is string => {\n  return typeof text === 'string' || text instanceof String;\n};\n\nconst isNumber = (num: unknown): num is number => {\n  return typeof Number(num) === 'number';\n};\n\nexport const AddEntryForm = ({ onSubmit, onCancel } : Props ) => {\n  const [{ diagnoses }] = useStateValue();\n\n  return (\n    <Formik\n      initialValues={{\n        description: '',\n        date: '',\n        specialist: '',\n        diagnosisCodes: [],\n        discharge: { date: '', criteria: '' },\n        sickLeave: { startDate: '', endDate: '' },\n        employerName: '',\n        healthCheckRating: 0, \n        type: EntryType.Hospital\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = 'Field is required';\n        const formatError = 'Formatted incorrectly';\n        const errors: { [field: string]: string } = {};\n        if(!values.description) {\n          errors.description = requiredError;\n        }\n        if(!values.date) {\n          errors.date = requiredError;\n        }\n        if(!values.specialist) {\n          errors.specialist = requiredError;\n        }\n        if(typeof values.description !== 'string') {\n          errors.description = formatError;\n        }\n        if(typeof values.date !== 'string') {\n          errors.date = formatError;\n        }\n        if(typeof values.specialist !== 'string') {\n          errors.specialist = formatError;\n        }\n        if(values.type === EntryType.Hospital && (!values.discharge.date || !values.discharge.criteria)) {\n          errors.discharge = requiredError;\n        }\n        if(values.type === EntryType.OccupationalHealthcare && (!isString(values.sickLeave.startDate) || !isString(values.sickLeave.endDate))) {\n          errors.sickLeave = formatError;\n        }\n        if(values.type === EntryType.OccupationalHealthcare && !isString(values.employerName)) {\n          errors.sickLeave = formatError;\n        }\n        if(values.type === EntryType.HealthCheck && values.healthCheckRating === null) {\n          errors.healthCheckRating = requiredError;\n        }\n        if(values.type === EntryType.HealthCheck && !isNumber(values.healthCheckRating)) {\n          errors.healthCheckRating = formatError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty, setFieldValue, setFieldTouched, values }) => {\n        return (\n          <Form className=\"form ui\">\n            <SelectField\n              label=\"Entry Type\"\n              name=\"type\"\n              options={entryTypeOptions}\n            />\n            <Field\n              label=\"Date\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"date\"\n              component={TextField}\n            />\n            <Field\n              label=\"Specialist\"\n              placeholder=\"Specialist\"\n              name=\"specialist\"\n              component={TextField}\n            />\n            <Field\n              label=\"Description\"\n              placeholder=\"Description\"\n              name=\"description\"\n              component={TextField}\n            />\n            <DiagnosisSelection\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              diagnoses={Object.values(diagnoses)}\n            />         \n            {values.type === EntryType.Hospital &&\n              <div style={{ paddingBottom: '10px' }}>\n                <Field\n                  label=\"Discharge Date\"\n                  placeholder=\"YYYY-MM-DD\"\n                  name=\"discharge.date\"\n                  component={TextField}\n                />\n                <Field\n                  label=\"Discharge Criteria\"\n                  placeholder=\"Criteria\"\n                  name=\"discharge.criteria\"\n                  component={TextField}\n                />\n              </div>\n            }\n            {values.type === EntryType.OccupationalHealthcare &&\n              <div style={{ paddingBottom: '10px' }}>\n                <Field\n                  label=\"Sick Leave Start Date\"\n                  placeholder=\"YYYY-MM-DD\"\n                  name=\"sickLeave.startDate\"\n                  component={TextField}\n                />\n                <Field\n                  label=\"Sick Leave End Date\"\n                  placeholder=\"YYYY-MM-DD\"\n                  name=\"sickLeave.endDate\"\n                  component={TextField}\n                />\n                <Field\n                  label=\"Employer Name\"\n                  placeholder=\"Employer\"\n                  name=\"employerName\"\n                  component={TextField}\n                />\n              </div>\n            }\n            {values.type === EntryType.HealthCheck &&\n              <Field\n                label=\"Health Check Rating\"\n                name=\"healthCheckRating\"\n                component={NumberField}\n                min={0}\n                max={3}\n              />\n            }\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddEntryForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddEntryForm, { EntryFormValues } from './AddEntryForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: EntryFormValues) => void;\n  error?: string;\n}\n\nconst AddEntryModal = ({ modalOpen, onClose, onSubmit, error}: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new Entry</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddEntryForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddEntryModal;\n","import axios from 'axios';\nimport React from 'react';\nimport { Patient } from '../types';\nimport { useStateValue, setPatient } from '../state';\nimport { useParams } from 'react-router';\nimport { Icon, SemanticICONS, Button } from 'semantic-ui-react';\nimport { apiBaseUrl } from '../constants';\nimport EntryDetails from './Entry';\nimport AddEntryModal from '../AddEntryModal';\nimport { EntryFormValues } from '../AddEntryModal/AddEntryForm';\n\nconst PatientPage = () => {\n  const [{ patient }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n  };\n\n  const { id } = useParams<{ id: string }>();\n\n  React.useEffect(() => {\n    const fetchPatient = async () => {\n      try {\n        const { data: patientInfoFromApi } = await axios.get<Patient>(\n          `${apiBaseUrl}/patients/${id}`\n        );\n        dispatch(setPatient(patientInfoFromApi));\n      } catch (e: unknown) {\n        console.error(e);\n      }\n    };\n    void fetchPatient();\n  }, [dispatch]);\n\n  const genderIcon = (): SemanticICONS => {\n    switch (patient?.gender) {\n      case 'male':\n        return 'mars';\n      case 'female':\n        return 'venus';\n      default:\n        return 'genderless';\n    }\n  };\n\n  const submitNewEntry = async (values: EntryFormValues) => {\n    try {\n      const { data: newEntry } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients/${id}/entries`,\n        values\n      );\n      dispatch(setPatient(newEntry));\n      closeModal();\n    } catch (e) {\n      // @ts-expect-error error unknown\n      console.error(e.response?.data || 'Unknown Error');\n    }\n  };\n\n  if (!patient) return null;\n\n  return (\n    <div className=\"Patient-Details\">\n      <h2>{patient.name} <Icon name={genderIcon()} /></h2>\n      <p>ssn: {patient.ssn}</p>\n      <p>occupation: {patient?.occupation}</p>\n      <Button onClick={() => openModal()}>Add New Entry</Button>\n      {patient.entries.length > 0 &&\n        <div style={{ paddingTop: '10px' }}>\n          <h3>entries</h3>\n          {patient.entries.map(entry =>\n            <EntryDetails key={entry.id} entry={entry} />\n          )}\n        </div>\n      }\n      <AddEntryModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewEntry}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default PatientPage;\n","import React from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport { Button, Divider, Header, Container } from 'semantic-ui-react';\n\nimport { apiBaseUrl } from './constants';\nimport { setDiagnoses, setPatients, useStateValue } from './state';\nimport { Diagnosis, Patient } from './types';\n\nimport PatientListPage from './PatientListPage';\nimport PatientPage from './PatientPage';\n\nconst App = () => {\n  const [, dispatch] = useStateValue();\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n\n  React.useEffect(() => {\n    const fetchPatientList = async () => {\n      setIsLoading(true);\n      try {\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\n          `${apiBaseUrl}/patients`\n        );\n        dispatch(setPatients(patientListFromApi));\n        setIsLoading(false);\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    void fetchPatientList();\n  }, [dispatch]);\n\n  React.useEffect(() => {\n    const fetchDiagnosesList = async () => {\n      try {\n        const { data: diagnosesListFromApi } = await axios.get<Diagnosis[]>(\n          `${apiBaseUrl}/diagnoses`\n        );\n        dispatch(setDiagnoses(diagnosesListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    void fetchDiagnosesList();\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Container>\n          <Header as=\"h1\">Patientor</Header>\n          <Button as={Link} to=\"/\" primary>\n            Home\n          </Button>\n          <Divider hidden />\n          <Switch>\n            <Route path=\"/patients/:id\">\n              <PatientPage />\n            </Route>\n            <Route path=\"/\">\n              <PatientListPage isLoading={isLoading} />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from './state';\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}